package com.vortex.framework.services.feature;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

import com.vortex.framework.common.FirebaseUtils;
import com.vortex.framework.converters.feature.FeatureConverter;
import com.vortex.framework.entities.feature.Feature;
import com.vortex.framework.entities.feature.FeatureRepository;
import com.vortex.framework.objects.feature.FeatureVO;

@Controller // This means that this class is a Controller
@CrossOrigin
//Allow all (origins = { "http://localhost:4200", "https://dev-shreksworld.duckdns.org", "https://uat-shreksworld.duckdns.org", "https://shreksworld.duckdns.org" })
@RequestMapping(path = "/featuresvc/feature") // This means URL's start with /featuresvc (after Application path)
public class FeaturesController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private FeatureRepository featureRepository;

	@Value("${vortex.framework.should.skipauthcheck}")
	private String shouldSkipAuths;
	
	private boolean shouldSkipAuthChecks() {
		return "Y".equalsIgnoreCase(shouldSkipAuths);
	}
	
	/**
	 * @param idToken
	 * @param tFeature
	 * @return
	 */
	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody FeatureVO add(@RequestHeader("Authorization") String idToken,
			@RequestBody FeatureVO tFeature) {

		String uid = FirebaseUtils.getDecodedFireBaseToken(idToken);
		if (uid != null || shouldSkipAuthChecks()) {
			Feature newFeature =FeatureConverter.convertVOToEntity(tFeature);
			featureRepository.save(newFeature);
			return FeatureConverter.convertEntityToVO(newFeature);
		}
		throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Actor Not Found");
	}

	/**
	 * @param idToken
	 * @param tFeature
	 * @return
	 */
	@PostMapping("/delete")
	@ResponseBody FeatureVO markAsDeleted(@RequestHeader("Authorization") String idToken, @RequestBody FeatureVO tFeature) {
		String uid = FirebaseUtils.getDecodedFireBaseToken(idToken);
		if (uid != null || shouldSkipAuthChecks()) {
			Optional<Feature> feature = featureRepository.findById(tFeature.getId());
			if (feature != null) {
				Feature featureEntity = feature.get();
				featureEntity.setActive("N");
				featureRepository.save(featureEntity);
				return FeatureConverter.convertEntityToVO(featureEntity);
			}
		}
		throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Actor Not Found");
	}

	@PostMapping("/read")
	@ResponseBody FeatureVO readOne(@RequestHeader("Authorization") String idToken, @RequestBody FeatureVO tFeature) {
		String uid = FirebaseUtils.getDecodedFireBaseToken(idToken);
		if (uid != null || shouldSkipAuthChecks()) {
			Optional<Feature> feature = featureRepository.findById(tFeature.getId());
			if (feature != null) {
				Feature featureEntity = feature.get();
				return FeatureConverter.convertEntityToVO(featureEntity);
			}
		}
		throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Actor Not Found");
	}
	
	/**
	 * @param idToken
	 * @return
	 */
	@GetMapping(path = "/all")
	public @ResponseBody Iterable<FeatureVO> getActive(@RequestHeader("Authorization") String idToken) {

		List<FeatureVO> allFeatures = new ArrayList<>();

		String uid = FirebaseUtils.getDecodedFireBaseToken(idToken);
		if (uid != null || shouldSkipAuthChecks()) {
			// This returns a JSON or XML with the items
			List<Feature> tFeatures = featureRepository.findActiveFeatures();
			for (Feature eachFeature : tFeatures) {
				allFeatures.add(FeatureConverter.convertEntityToVO(eachFeature));
			}
			return allFeatures;
		}
		throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Actor Not Found");
	}
}